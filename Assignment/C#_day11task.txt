using System;
using System.Collections.Generic;


class DuplicateEnrollmentException : Exception { public DuplicateEnrollmentException(string message) : base(message) { } }
class CourseNotFoundException : Exception { public CourseNotFoundException(string message) : base(message) { } }
class StudentNotFoundException : Exception { public StudentNotFoundException(string message) : base(message) { } }
class TeacherNotFoundException : Exception { public TeacherNotFoundException(string message) : base(message) { } }
class PaymentValidationException : Exception { public PaymentValidationException(string message) : base(message) { } }
class InvalidStudentDataException : Exception { public InvalidStudentDataException(string message) : base(message) { } }
class InvalidCourseDataException : Exception { public InvalidCourseDataException(string message) : base(message) { } }
class InvalidEnrollmentDataException : Exception { public InvalidEnrollmentDataException(string message) : base(message) { } }
class InvalidTeacherDataException : Exception { public InvalidTeacherDataException(string message) : base(message) { } }
class InsufficientFundsException : Exception { public InsufficientFundsException(string message) : base(message) { } }

class Student
{
    public int StudentID { get; set; }
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public DateTime DateOfBirth { get; set; }
    public string Email { get; set; }
    public string PhoneNumber { get; set; }
    private List<Course> EnrolledCourses = new List<Course>();
    private List<Payment> PaymentHistory = new List<Payment>();

    public Student(int studentID, string firstName, string lastName, DateTime dob, string email, string phone)
    {
        if (string.IsNullOrEmpty(email)) throw new InvalidStudentDataException("Invalid email format.");
        if (dob > DateTime.Now) throw new InvalidStudentDataException("Invalid date of birth.");
        
        StudentID = studentID;
        FirstName = firstName;
        LastName = lastName;
        DateOfBirth = dob;
        Email = email;
        PhoneNumber = phone;
    }

    public void EnrollInCourse(Course course)
    {
        if (EnrolledCourses.Contains(course)) throw new DuplicateEnrollmentException("Student is already enrolled in this course.");
        EnrolledCourses.Add(course);
        Console.WriteLine($"{FirstName} {LastName} enrolled in {course.CourseName}.");
    }

    public void MakePayment(decimal amount, DateTime paymentDate)
    {
        if (amount <= 0) throw new PaymentValidationException("Payment amount must be greater than zero.");
        Payment payment = new Payment(PaymentHistory.Count + 1, this, amount, paymentDate);
        PaymentHistory.Add(payment);
        Console.WriteLine($"Payment of {amount:C} made on {paymentDate.ToShortDateString()}.");
    }
}

class Course
{
    public int CourseID { get; set; }
    public string CourseName { get; set; }
    public string CourseCode { get; set; }
    public Teacher Instructor { get; private set; }

    public Course(int courseID, string courseName, string courseCode)
    {
        if (string.IsNullOrEmpty(courseCode)) throw new InvalidCourseDataException("Invalid course code.");
        
        CourseID = courseID;
        CourseName = courseName;
        CourseCode = courseCode;
    }

    public void AssignTeacher(Teacher teacher)
    {
        if (teacher == null) throw new TeacherNotFoundException("Teacher not found.");
        Instructor = teacher;
        Console.WriteLine($"{teacher.FirstName} {teacher.LastName} assigned to {CourseName}.");
    }
}

class Teacher
{
    public int TeacherID { get; set; }
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string Email { get; set; }

    public Teacher(int teacherID, string firstName, string lastName, string email)
    {
        if (string.IsNullOrEmpty(email)) throw new InvalidTeacherDataException("Invalid email format.");
        
        TeacherID = teacherID;
        FirstName = firstName;
        LastName = lastName;
        Email = email;
    }
}

class SIS
{
    private List<Student> Students = new List<Student>();
    private List<Course> Courses = new List<Course>();

    public void EnrollStudentInCourse(Student student, Course course)
    {
        if (!Students.Contains(student)) throw new StudentNotFoundException("Student not found in the system.");
        if (!Courses.Contains(course)) throw new CourseNotFoundException("Course not found in the system.");
        student.EnrollInCourse(course);
    }
}

class Program
{
    static void Main()
    {
        try
        {
            SIS sis = new SIS();
            Student student1 = new Student(1, "John", "Doe", new DateTime(2000, 5, 15), "john@example.com", "123-456-7890");
            Course course1 = new Course(101, "Mathematics", "MATH101");
            Teacher teacher1 = new Teacher(1, "Alice", "Smith", "alice@example.com");

            sis.EnrollStudentInCourse(student1, course1);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}
